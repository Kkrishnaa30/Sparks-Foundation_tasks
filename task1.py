# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lvPurEt66wVdPehMHhgdvkwmp9NiWdPv

## SPARKS FOUNDATION

# TASK -01

***Krishna Khandelwal
GRIP-SEPT22***

Problem Statement-

Predict the percentage of an student based on the no. of hrs.
(Using Supervised ML).
Also find the predicted score if a student studies for 9.25 hrs/day?


---
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  
# %matplotlib inline

"""Data source

"""

url = "http://bit.ly/w-data"
data = pd.read_csv(url)
print("Successfully Imported Data")

data.head(10)

"""Statistical status of data"""

data.describe()

"""Plotting the distribution of scores"""

data.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()

x = data.iloc[:, :-1].values  
y = data.iloc[:, 1].values

from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

from sklearn.linear_model import LinearRegression  
regressor = LinearRegression()  
regressor.fit (x_train, y_train) 

print("Training complete.")

"""Plotting the regression line"""

line = regressor.coef_*x+regressor.intercept_
plt.scatter(x, y)
plt.plot(x, line);
plt.show()

"""Making the predictions"""

print(x_test) # Testing data - In Hours
y_pred = regressor.predict(x_test) # Predicting the scores

"""Comparing Actual vs Predicted"""

df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df

df.describe()

"""Predicting for the test dataset"""

pred = regressor.predict(x_test.reshape(-1,1))
pred

pred1 = pd.DataFrame(pred)
pred1

plt.plot(x_test,pred,label='LinearRegression',color = 'b')
plt.scatter(x_test,y_test,label = 'Test_data',color = 'r')
plt.legend()
plt.show()

regressor.predict([[9.25]])

"""Evaluating the Model"""

from sklearn import metrics  
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))